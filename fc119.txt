import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class UnitConverter extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Unit Converter");

      
        Label titleLabel = new Label("Choose an option:");
        RadioButton kgToLbRadioButton = new RadioButton("kilograms to Pounds");
        RadioButton gramsToKgRadioButton = new RadioButton("grams to Kilograms");
        RadioButton kmToMilesRadioButton = new RadioButton("kilometers to Miles");
        RadioButton mmToInchesRadioButton = new RadioButton("millimeters to Inches");
        Button convertButton = new Button("Convert");

      
        ToggleGroup toggleGroup = new ToggleGroup();
        kgToLbRadioButton.setToggleGroup(toggleGroup);
        gramsToKgRadioButton.setToggleGroup(toggleGroup);
        kmToMilesRadioButton.setToggleGroup(toggleGroup);
        mmToInchesRadioButton.setToggleGroup(toggleGroup);

        TextField inputField = new TextField();
        Label resultLabel = new Label("Result:");

        VBox layout = new VBox(10);
        layout.setPadding(new Insets(10));
        layout.getChildren().addAll(
                titleLabel,
                kgToLbRadioButton,
                gramsToKgRadioButton,
                kmToMilesRadioButton,
                mmToInchesRadioButton,
                inputField,
                convertButton,
                resultLabel
        );

        convertButton.setOnAction(e -> {
            int choice = getSelectedChoice(toggleGroup);

            if (choice == 0) {
                resultLabel.setText("Invalid choice.");
                return;
            }

            double inputValue;
            try {
                inputValue = Double.parseDouble(inputField.getText());
            } catch (NumberFormatException ex) {
                resultLabel.setText("Invalid input. Please enter a number.");
                return;
            }

            double result = 0.0;

            switch (choice) {
                case 1:
                    result = kgToLb(inputValue);
                    break;
                case 2:
                    result = gramsToKg(inputValue);
                    break;
                case 3:
                    result = kmToMiles(inputValue);
                    break;
                case 4:
                    result = mmToInches(inputValue);
                    break;
            }

            resultLabel.setText("Result: " + result);
        });

      
        Scene scene = new Scene(layout, 300, 300);
        primaryStage.setScene(scene);

     
        primaryStage.show();
    }

    private int getSelectedChoice(ToggleGroup toggleGroup) {
        RadioButton selectedRadioButton = (RadioButton) toggleGroup.getSelectedToggle();
        if (selectedRadioButton == null) {
            return 0;
        }

        String text = selectedRadioButton.getText();

        if (text.equals("Kilograms to Pounds")) {
            return 1;
        } else if (text.equals("Grams to Kilograms")) {
            return 2;
        } else if (text.equals("Kilometers to Miles")) {
            return 3;
        } else if (text.equals("Millimeters to Inches")) {
            return 4;
        } else {
            return 0;
        }
    }

    private double kgToLb(double kg) {
        return kg * 2.20462;
    }

    private double gramsToKg(double grams) {
        return grams * 0.001;
    }

    private double kmToMiles(double km) {
        return km * 0.621371;
    }

    private double mmToInches(double mm) {
        return mm * 0.0393701;
    }
}
